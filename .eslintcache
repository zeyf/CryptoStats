[{"D:\\React Projects\\cryptostats\\src\\index.js":"1","D:\\React Projects\\cryptostats\\src\\App.js":"2","D:\\React Projects\\cryptostats\\src\\reportWebVitals.js":"3","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js":"4","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js":"5","D:\\React Projects\\cryptostats\\src\\components\\context\\types.js":"6","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js":"7","D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js":"8","D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js":"9","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js":"10","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js":"11","D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js":"12","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js":"13","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js":"14","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js":"15","D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js":"16","D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js":"17","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js":"18","D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js":"19","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js":"20","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js":"21","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js":"22","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js":"23","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js":"24","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\ExtraInfo.js":"25","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\useTickerSortableData.js":"26","D:\\React Projects\\cryptostats\\src\\components\\layout\\Not Found\\NotFound.js":"27","D:\\React Projects\\cryptostats\\src\\components\\About\\About.js":"28"},{"size":500,"mtime":1611623574376,"results":"29","hashOfConfig":"30"},{"size":1729,"mtime":1612802463777,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"32","hashOfConfig":"30"},{"size":2773,"mtime":1611990176122,"results":"33","hashOfConfig":"30"},{"size":109,"mtime":1611613321572,"results":"34","hashOfConfig":"30"},{"size":780,"mtime":1612589766587,"results":"35","hashOfConfig":"30"},{"size":1245,"mtime":1611960802256,"results":"36","hashOfConfig":"30"},{"size":8575,"mtime":1612851955754,"results":"37","hashOfConfig":"30"},{"size":8889,"mtime":1612846768085,"results":"38","hashOfConfig":"30"},{"size":18822,"mtime":1612846253241,"results":"39","hashOfConfig":"30"},{"size":1165,"mtime":1611863609337,"results":"40","hashOfConfig":"30"},{"size":2697,"mtime":1612591178081,"results":"41","hashOfConfig":"30"},{"size":111,"mtime":1611774377557,"results":"42","hashOfConfig":"30"},{"size":1384,"mtime":1612589967127,"results":"43","hashOfConfig":"30"},{"size":672,"mtime":1612590848439,"results":"44","hashOfConfig":"30"},{"size":386,"mtime":1612321059371,"results":"45","hashOfConfig":"30"},{"size":5456,"mtime":1612591152912,"results":"46","hashOfConfig":"30"},{"size":1306,"mtime":1612851178748,"results":"47","hashOfConfig":"30"},{"size":5765,"mtime":1612632927950,"results":"48","hashOfConfig":"30"},{"size":19351,"mtime":1612663014939,"results":"49","hashOfConfig":"30"},{"size":5598,"mtime":1612731218734,"results":"50","hashOfConfig":"30"},{"size":3977,"mtime":1612320199412,"results":"51","hashOfConfig":"30"},{"size":121,"mtime":1612156917113,"results":"52","hashOfConfig":"30"},{"size":887,"mtime":1612320073244,"results":"53","hashOfConfig":"30"},{"size":6194,"mtime":1612653672628,"results":"54","hashOfConfig":"30"},{"size":1422,"mtime":1612590828947,"results":"55","hashOfConfig":"30"},{"size":862,"mtime":1612656389934,"results":"56","hashOfConfig":"30"},{"size":1844,"mtime":1612810674936,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iun4fm",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React Projects\\cryptostats\\src\\index.js",[],"D:\\React Projects\\cryptostats\\src\\App.js",[],"D:\\React Projects\\cryptostats\\src\\reportWebVitals.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js",[],["118","119"],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\types.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js",["120","121"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js",["122"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js",[],"D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js",["123","124"],"import React, {useReducer} from 'react'\r\nimport CryptoChartContext from './CryptoChartContext';\r\nimport CryptoChartReducer from './CryptoChartReducer'\r\nimport axios from 'axios';\r\nimport {\r\n    SET_LOADING,\r\n    SET_CRYPTO_TIME_FRAME,\r\n    GET_CRYPTO_CHART_DATA,\r\n    SET_MIN_MAX_PRICE,\r\n} from '../../types';\r\n\r\nconst CryptoChartState = ({children}) => {\r\n    \r\n    const InitialState = {\r\n        CRYPTODATA: null,\r\n        MINMAX: null,\r\n        TIMEFRAME: 1,\r\n        LOADING: false,\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(CryptoChartReducer, InitialState);\r\n\r\n    const  SetLoading = () => {\r\n        dispatch({type: SET_LOADING})\r\n    }\r\n\r\n\r\n    const getCryptoChartData = async (CryptoID, TimeFrame) => {\r\n        if (CryptoID) {\r\n            SetLoading();\r\n            setTimeFrame(TimeFrame);\r\n            const Data = await axios.get(`https://api.coingecko.com/api/v3/coins/${CryptoID}/market_chart?vs_currency=usd&days=${TimeFrame}`);\r\n\r\n            const TimeFramePriceData = Data.data.prices;\r\n            const Prices = TimeFramePriceData.map((daydataset, i) => {\r\n                if (String(daydataset)[0] !== '0') return Number(daydataset[daydataset.length - 1].toFixed(2))\r\n                if (String(daydataset)[0] === '0') return Number(daydataset[daydataset.length - 1].toFixed(4))\r\n            // may have to add condition handling if undefined, null, etc\r\n            })\r\n\r\n            const DateFormatted = (type) => {\r\n                if (TimeFramePriceData) {\r\n\r\n                    const DateType = TimeFramePriceData.map((daydataset, i) => {\r\n                        \r\n                        const UnixTimeStamp = daydataset[daydataset.length - daydataset.length]\r\n                        const UnixToDate = new Date(UnixTimeStamp); // milliseconds to seconds\r\n                        const ToolTipDate = String(UnixToDate).split(/\\s/gi).slice(1, 4)\r\n                        const Time = String(UnixToDate).split(/\\s/gi).slice(4, 5)\r\n                        if (type === 'datetime') {   \r\n                            return `${UnixToDate.getHours()}:${UnixToDate.getMinutes()}:${UnixToDate.getSeconds()} ${UnixToDate.getHours() >= 0 && UnixToDate.getHours() < 12 ? `AM` : `PM`}`\r\n                        } else if (type === 'date') {\r\n                            return `${String(ToolTipDate).replaceAll(/,/gi, ' ')} ${Time}`\r\n                        }\r\n                    })\r\n                    return DateType\r\n                    // may have to add condition handling if undefined, null, etc    \r\n                }\r\n            }\r\n\r\n            const PriceSorted = [...Prices].sort() // doing Prices.sort() would sort the Prices list even if it was contained in a variable, had to use spread op\r\n                \r\n            const DatePriceObjArray = TimeFramePriceData.map((item, i) => {\r\n                return {\r\n                    time: DateFormatted('datetime')[i],\r\n                    date: DateFormatted('date')[i],\r\n                    Price: Prices[i]\r\n                }\r\n            })\r\n            \r\n            setMinMaxOfPrice(PriceSorted[0], PriceSorted[PriceSorted.length - 1])\r\n            dispatch({type: GET_CRYPTO_CHART_DATA, payload: DatePriceObjArray})\r\n        }\r\n    }\r\n\r\n    const setTimeFrame = (TimeFrame) => {\r\n        dispatch({type: SET_CRYPTO_TIME_FRAME, payload: TimeFrame})\r\n    }\r\n\r\n    const setMinMaxOfPrice = (min, max) => {\r\n        dispatch({\r\n            type: SET_MIN_MAX_PRICE,\r\n            payload: {\r\n                min,\r\n                max\r\n            }\r\n        })\r\n    }\r\n\r\n    return <CryptoChartContext.Provider value={{\r\n            \r\n            CRYPTODATA: state.CRYPTODATA,\r\n            TIMEFRAME: state.TIMEFRAME,\r\n            LOADING: state.LOADING,\r\n            MINMAX: state.MINMAX,\r\n            getCryptoChartData,\r\n            setTimeFrame\r\n            }}>\r\n                {children}\r\n            </CryptoChartContext.Provider>\r\n}\r\n\r\nexport default CryptoChartState\r\n","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\ExtraInfo.js",["125"],"import {useContext} from 'react'\r\nimport CryptoContext from '../../context/CryptoContext/CryptoContext'\r\nimport useTickerSortableData from './useTickerSortableData'\r\nimport './ExtraInfo.css'\r\n\r\nconst ExtraInfo = ({ReturnCrypto, formatPrice, formatSpread}) => {\r\n\r\n    \r\n    const {TICKERSORTEDFIELD} = useContext(CryptoContext);\r\n\r\n    const getClassNamesFor = (name) => {\r\n        if (!TICKERSORTEDFIELD) {\r\n          return;\r\n        }\r\n        return TICKERSORTEDFIELD.key === name ? TICKERSORTEDFIELD.direction : undefined;\r\n      };\r\n\r\n    const DestructuredTickers = () => {\r\n        \r\n        if (ReturnCrypto('tickers')) {\r\n            \r\n            const MutableTickers = [...ReturnCrypto('tickers')]\r\n            const FinalTickers = MutableTickers.map((ticker, i) => {\r\n                \r\n                const { market, converted_last, base, target } = ticker;\r\n                const { name } = market;\r\n                const { usd } = converted_last\r\n                \r\n                ticker.pair = `${base}/${target}`\r\n                ticker.lasttradeinusd = usd;\r\n                ticker.exchangename = name;\r\n                \r\n                return ticker\r\n            })\r\n            return FinalTickers\r\n            \r\n        }\r\n    }\r\n\r\n    const {items, requestSort} = useTickerSortableData(DestructuredTickers());\r\n\r\n        return (\r\n\r\n        <div className='extrainfo extrainfo--primary'>\r\n            <div className='tickers tickers--primary'>\r\n                <h4 className='tickers__head'>\r\n                    {ReturnCrypto('symbol') && ReturnCrypto('symbol')} Markets\r\n                </h4>\r\n                <div className='tickers__scrollable'>\r\n                    <table className='tickers__table'>\r\n                        <thead className='tickers_thead'>\r\n                            <tr className='tickers_headrow'>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('exchangename')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('exchangename')\r\n                                    }}>\r\n                                        EXCHANGE\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('pair')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('pair')\r\n                                    }}>\r\n                                        PAIR\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('lasttradeinusd')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('lasttradeinusd')\r\n                                    }}>\r\n                                        PRICE\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('bid_ask_spread_percentage')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('bid_ask_spread_percentage')\r\n                                    }}>\r\n                                        SPREAD\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('volume')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('volume')\r\n                                    }}>\r\n                                        24H VOLUME\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        {DestructuredTickers() && items.map((ticker, i) => {\r\n\r\n                            const {\r\n\r\n                                base,\r\n                                bid_ask_spread_percentage,\r\n                                trade_url,\r\n                                volume,\r\n                                exchangename,\r\n                                lasttradeinusd,\r\n                                pair\r\n                            \r\n                            } = ticker;\r\n\r\n                            if (base === ReturnCrypto('symbol')) {\r\n\r\n                                return  <tr className='tickers__row'>\r\n                                        <td className='tickers__dataexchange'>\r\n                                            <a className='tickers_link' href={trade_url} target='_blank' rel='noreferrer'>\r\n                                                {exchangename}\r\n                                            </a>\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                                {pair}\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            ${formatPrice(lasttradeinusd)}\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            {formatSpread(bid_ask_spread_percentage)}%\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            ${formatPrice(Number(volume * lasttradeinusd))}\r\n                                        </td>\r\n                                    </tr>\r\n                            }\r\n                        })}\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExtraInfo\r\n","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\useTickerSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Not Found\\NotFound.js",["126"],"import {Link} from 'react-router-dom'\r\nimport './NotFound.css'\r\nimport NotFoundSVG from '../../../images/NotFound.svg'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className='notfound notfound--primary'>\r\n\r\n            <img src={NotFoundSVG} className='notfound__image' />\r\n            <div className='notfoundinner notfoundinner--primary'>\r\n                <h1 className='notfound__head'>\r\n                    Page not found\r\n                </h1>\r\n                <p className='notfound__text'>\r\n                    This page does not exist!\r\n                </p>\r\n                <Link to='/' className='notfound__link'>\r\n                    <button className='notfound__button'>\r\n                        BACK TO HOME\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n","D:\\React Projects\\cryptostats\\src\\components\\About\\About.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":24,"column":64,"nodeType":"133","messageId":"134","endLine":24,"endColumn":66},{"ruleId":"135","severity":1,"message":"136","line":54,"column":11,"nodeType":"137","messageId":"138","endLine":54,"endColumn":21},{"ruleId":"131","severity":1,"message":"139","line":208,"column":129,"nodeType":"133","messageId":"134","endLine":208,"endColumn":131},{"ruleId":"131","severity":1,"message":"139","line":35,"column":67,"nodeType":"133","messageId":"134","endLine":35,"endColumn":69},{"ruleId":"131","severity":1,"message":"139","line":44,"column":77,"nodeType":"133","messageId":"134","endLine":44,"endColumn":79},{"ruleId":"131","severity":1,"message":"139","line":90,"column":73,"nodeType":"133","messageId":"134","endLine":90,"endColumn":75},{"ruleId":"140","severity":1,"message":"141","line":9,"column":13,"nodeType":"142","endLine":9,"endColumn":66},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'WindowSize' is assigned a value but never used.","Identifier","unusedVar","Array.prototype.map() expects a value to be returned at the end of arrow function.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]