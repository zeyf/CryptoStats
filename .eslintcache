[{"D:\\React Projects\\cryptostats\\src\\index.js":"1","D:\\React Projects\\cryptostats\\src\\App.js":"2","D:\\React Projects\\cryptostats\\src\\reportWebVitals.js":"3","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js":"4","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js":"5","D:\\React Projects\\cryptostats\\src\\components\\context\\types.js":"6","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js":"7","D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js":"8","D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js":"9","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js":"10","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js":"11","D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js":"12","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js":"13","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js":"14","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js":"15","D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js":"16","D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js":"17","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js":"18","D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js":"19","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js":"20","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js":"21","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js":"22","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js":"23","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js":"24","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\ExtraInfo.js":"25","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\useTickerSortableData.js":"26","D:\\React Projects\\cryptostats\\src\\components\\layout\\Not Found\\NotFound.js":"27"},{"size":500,"mtime":1611623574376,"results":"28","hashOfConfig":"29"},{"size":1268,"mtime":1612657181252,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":2773,"mtime":1611990176122,"results":"32","hashOfConfig":"29"},{"size":109,"mtime":1611613321572,"results":"33","hashOfConfig":"29"},{"size":780,"mtime":1612589766587,"results":"34","hashOfConfig":"29"},{"size":1245,"mtime":1611960802256,"results":"35","hashOfConfig":"29"},{"size":4960,"mtime":1612729655881,"results":"36","hashOfConfig":"29"},{"size":8563,"mtime":1612654886372,"results":"37","hashOfConfig":"29"},{"size":18380,"mtime":1612663077164,"results":"38","hashOfConfig":"29"},{"size":1165,"mtime":1611863609337,"results":"39","hashOfConfig":"29"},{"size":2697,"mtime":1612591178081,"results":"40","hashOfConfig":"29"},{"size":111,"mtime":1611774377557,"results":"41","hashOfConfig":"29"},{"size":1384,"mtime":1612589967127,"results":"42","hashOfConfig":"29"},{"size":672,"mtime":1612590848439,"results":"43","hashOfConfig":"29"},{"size":386,"mtime":1612321059371,"results":"44","hashOfConfig":"29"},{"size":5456,"mtime":1612591152912,"results":"45","hashOfConfig":"29"},{"size":205,"mtime":1611898521100,"results":"46","hashOfConfig":"29"},{"size":5765,"mtime":1612632927950,"results":"47","hashOfConfig":"29"},{"size":19351,"mtime":1612663014939,"results":"48","hashOfConfig":"29"},{"size":5612,"mtime":1612717652036,"results":"49","hashOfConfig":"29"},{"size":3977,"mtime":1612320199412,"results":"50","hashOfConfig":"29"},{"size":121,"mtime":1612156917113,"results":"51","hashOfConfig":"29"},{"size":887,"mtime":1612320073244,"results":"52","hashOfConfig":"29"},{"size":6194,"mtime":1612653672628,"results":"53","hashOfConfig":"29"},{"size":1422,"mtime":1612590828947,"results":"54","hashOfConfig":"29"},{"size":862,"mtime":1612656389934,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"iun4fm",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},"D:\\React Projects\\cryptostats\\src\\index.js",[],["115","116"],"D:\\React Projects\\cryptostats\\src\\App.js",[],"D:\\React Projects\\cryptostats\\src\\reportWebVitals.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\types.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js",["117"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js",["118"],"import React, {useEffect, useContext} from 'react'\r\nimport CryptoContext from '../context/CryptoContext/CryptoContext'\r\nimport FormatFunctions from '../../functions/Formatting Functions/FormatFunctions'\r\nimport CryptoSkeleton from './CryptoSkeleton'\r\nimport CryptoChart from './CryptoChart/CryptoChart';\r\nimport './Crypto.css'\r\nimport ExtraInfo from './Extra Info/ExtraInfo'\r\n\r\nconst Crypto = ({match}) => {\r\n\r\n    const {GetCrypto, LOADING, CRYPTO} = useContext(CryptoContext);\r\n    \r\n        useEffect(() => {\r\n            GetCrypto(match.params.CryptoID);\r\n            //eslint-disable-next-line\r\n        }, [])\r\n\r\n        const {\r\n            newVol,\r\n            newPrice,\r\n            addDirectionalTriangle,\r\n            format1DpriceChange,\r\n            nameShortener,\r\n            setCryptoPriceBGColor\r\n\r\n        } = FormatFunctions;\r\n\r\n        const ReturnCrypto = (type, subtype) => {\r\n            if (CRYPTO) {\r\n                \r\n                const {name, id, image, symbol, market_cap_rank, market_data, genesis_date, description, categories, links, tickers} = CRYPTO;\r\n\r\n                const {\r\n\r\n                    circulating_supply,\r\n                    total_supply,\r\n                    max_supply,\r\n                    current_price, \r\n                    market_cap_change_percentage_24h_in_currency, \r\n                    price_change_percentage_1h_in_currency,\r\n                    price_change_percentage_24h_in_currency,\r\n                    price_change_percentage_7d_in_currency,\r\n                    price_change_percentage_14d_in_currency,\r\n                    price_change_percentage_30d_in_currency,\r\n                    total_volume,\r\n                    sparkline_7d,\r\n                    ath,\r\n                    ath_date,\r\n                    atl,\r\n                    atl_date,\r\n                    market_cap,\r\n                    high_24h,\r\n                    low_24h,\r\n\r\n                } = market_data;\r\n\r\n                const {\r\n\r\n                    blockchain_site,\r\n                    homepage\r\n                \r\n                } = links;\r\n\r\n                \r\n                \r\n                if (type === 'name') {\r\n                    return name;\r\n                } else if (type === 'id') {\r\n                    return id\r\n                } else if (type === 'image') {\r\n                    if (image.large) {\r\n                        return image.large\r\n                    } else {\r\n                        return image.small\r\n                    }\r\n                } else if (type === 'symbol') {\r\n                    return symbol.toUpperCase();\r\n                } else if (type === 'market_cap_rank') {\r\n                    return market_cap_rank\r\n                } else if (type === 'circulating_supply') {\r\n                    return `${Number(circulating_supply.toFixed(0)).toLocaleString('en')} ${symbol.toUpperCase()}` \r\n                } else if (type === 'ath') {\r\n                    return ath.usd\r\n                } else if (type === 'ath_date') {\r\n                    return ath_date.usd\r\n                } else if (type === 'atl') {\r\n                    return atl.usd\r\n                } else if (type === 'atl_date') {\r\n                    return atl_date.usd\r\n                } else if (type === 'max_supply') {\r\n                    return max_supply\r\n                } else if (type === 'genesis_date') {\r\n                    return genesis_date\r\n                } else if (type === 'description') {\r\n                    return description.en\r\n                } else if (type === 'categories') {\r\n                    return categories\r\n                } else if (type === 'current_price') {\r\n                    return current_price.usd\r\n                } else if (type === 'marketcapChange24hr') {\r\n                    return market_cap_change_percentage_24h_in_currency.usd;\r\n                } else if (type === 'priceChange1hr') {\r\n                    return price_change_percentage_1h_in_currency.usd;\r\n                } else if (type === 'priceChange24hr') {\r\n                    return price_change_percentage_24h_in_currency.usd;\r\n                } else if (type === 'priceChange7d') {\r\n                    return price_change_percentage_7d_in_currency.usd;\r\n                } else if (type === 'priceChange14d') {\r\n                    return price_change_percentage_14d_in_currency.usd;\r\n                } else if (type === 'priceChange30d') {\r\n                    return price_change_percentage_30d_in_currency.usd;\r\n                } else if (type === 'volume24hr') {\r\n                    return total_volume.usd\r\n                } else if (type === 'total_supply') {\r\n                    if (total_supply) {\r\n\r\n                        return `${Number(total_supply.toFixed(0)).toLocaleString('en')} ${symbol.toUpperCase()}`\r\n                    } else {\r\n                        return `-`\r\n                    }\r\n                } else if (type === 'tickers') {\r\n                    return tickers\r\n                } else if (type === 'sparkline') {\r\n                    return sparkline_7d.price\r\n                } else if (type === 'links') {\r\n                    if (subtype === 'blockchain_site') {\r\n                        \r\n                        return blockchain_site\r\n\r\n                    } else if (subtype === 'homepage') {\r\n                        return homepage\r\n                    }\r\n                } else if (type === 'market_cap') {\r\n                    return market_cap.usd\r\n                } else if (type === 'low_24hr') {\r\n                    return low_24h.usd\r\n                } else if (type === 'high_24hr') {\r\n                    return high_24h.usd\r\n                }\r\n            }\r\n        }\r\n        return (\r\n        \r\n        <div className='crypto crypto--primary'>\r\n            {LOADING ? <CryptoSkeleton /> :\r\n\r\n            <div className='cryptoinfo cryptoinfo--primary'>\r\n                <div className='maindetails maindetails--primary'>\r\n                    <div className='maindetailcont1 maindetailcont1--primary'>\r\n                        <div className='maindetailsubcont1 maindetailsubcont1--primary'>\r\n                            <img className='maindetailsubcont1__image' src={ReturnCrypto('image')} alt={`${ReturnCrypto('name')} ${ReturnCrypto('symbol')} icon`} />\r\n                            <h1 className='maindetailsubcont1__name'>\r\n                                {ReturnCrypto('name') && `${nameShortener(ReturnCrypto('name'))} (${ReturnCrypto('symbol')})`}\r\n                            </h1>\r\n                            <p className='maindetailsubcont1__rank'>\r\n                                #{ReturnCrypto('market_cap_rank')}\r\n                            </p>\r\n                        </div>\r\n                        <div className='maindetailsubcont1 maindetailsubcont1--secondary'>\r\n                            <h2 className='maindetailsubcont1__price'>\r\n                                {ReturnCrypto('current_price') && `$${newPrice(ReturnCrypto('current_price'))}`}\r\n                            </h2>\r\n                            <p className='maindetailsubcont1__priceChange24hr' style={setCryptoPriceBGColor(ReturnCrypto('priceChange24hr'))}>\r\n                                {`${addDirectionalTriangle(ReturnCrypto('priceChange24hr'))}${format1DpriceChange(ReturnCrypto('priceChange24hr'))}%`}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='maindetailcont2 maindetailcont2--primary'>\r\n                        <div className='maindetailsubcont2 maindetailsubcont2--marketcap'>\r\n                            <h3 className='maindetailsubcont2__head'>\r\n                                MARKET CAP\r\n                            </h3>\r\n                            <p className='maindetailsubcont2__text'>\r\n                                {ReturnCrypto('market_cap') && newVol(ReturnCrypto('market_cap'))}\r\n                            </p>\r\n                        </div>\r\n                        <div className='maindetailsubcont2 maindetailsubcont2--volume24hr'>\r\n                            <h3 className='maindetailsubcont2__head'>\r\n                                VOLUME 24H\r\n                            </h3>\r\n                            <p className='maindetailsubcont2__text'>\r\n                                {ReturnCrypto('volume24hr') && newVol(ReturnCrypto('volume24hr'))}\r\n                            </p>\r\n                        </div>\r\n                        <div className='maindetailsubcont2 maindetailsubcont2--totalsupply'>\r\n                            <h3 className='maindetailsubcont2__head'>\r\n                                TOTAL SUPPLY\r\n                            </h3>\r\n                            <p className='maindetailsubcont2__text'>\r\n                                {ReturnCrypto('volume24hr') && ReturnCrypto('total_supply')}\r\n                            </p>\r\n                        </div>\r\n                        <div className='maindetailsubcont2 maindetailsubcont2--circulatingsupply'>\r\n                            <h3 className='maindetailsubcont2__head'>\r\n                                CIRCULATING SUPPLY\r\n                            </h3>\r\n                            <p className='maindetailsubcont2__text'>\r\n                                {ReturnCrypto('volume24hr') && ReturnCrypto('circulating_supply')}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='maindetailcont3 maindetailcont3--primary'>\r\n                        <div className='maindetailsubcont3 maindetailsubcont3--primary'>\r\n                            {ReturnCrypto('links', 'blockchain_site') && ReturnCrypto('links', 'blockchain_site').map((item, i) => {\r\n                                if(item) {\r\n                                    return <a className='maindetailsubcont3__link' href={item} target='_blank' rel='noreferrer'>Blockchain Explorer {++i}</a>\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='statsection statsection--primary'>\r\n                    <CryptoChart ReturnCrypto={ReturnCrypto} formatPriceChange={format1DpriceChange} />\r\n                    <div className='maindetailcont4 maindetailcont4--primary'>\r\n                            <div className='maindetailsubcont4 maindetailsubcont4--primary'>\r\n                                <h4 className='maindetailsubcont4__head'>\r\n                                    {ReturnCrypto('symbol') && `${ReturnCrypto('symbol')} Price Statistics`}\r\n                                </h4>\r\n                                <table className='maindetailsubcont4__table'>\r\n                                    <tbody>\r\n                                    \r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                {ReturnCrypto('symbol') && ReturnCrypto('symbol')} Price\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('current_price') && `$${newPrice(ReturnCrypto('current_price'))}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                24H Low to High\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('low_24hr') && ReturnCrypto('high_24hr') && `$${newPrice(ReturnCrypto('low_24hr'))} - $${newPrice(ReturnCrypto('high_24hr'))}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                24H Spread Range\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('low_24hr') && ReturnCrypto('high_24hr') &&\r\n                                                `${((((ReturnCrypto('low_24hr') / ReturnCrypto('high_24hr')) - 1) * -100).toFixed(2))}%`\r\n                                                }\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                All-Time High\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('ath') && `$${newPrice(ReturnCrypto('ath'))}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                All-Time Low\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('atl') && `$${newPrice(ReturnCrypto('atl'))}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                            <div className='maindetailsubcont4 maindetailsubcont4--primary'>\r\n                                <h4 className='maindetailsubcont4__head'>\r\n                                    {ReturnCrypto('symbol') && `${ReturnCrypto('symbol')} Market Cap Statistics`}\r\n                                </h4>\r\n                                <table className='maindetailsubcont4__table'>\r\n                                    <tbody>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                Market Cap\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                            {ReturnCrypto('market_cap') && `$${ReturnCrypto('market_cap').toLocaleString('en')}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                Trading Volume\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('volume24hr') && `$${ReturnCrypto('volume24hr').toLocaleString('en')}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                Volume to Market Cap \r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('volume24hr') && ReturnCrypto('market_cap') && `${((ReturnCrypto('volume24hr') / ReturnCrypto('market_cap')) * 100).toFixed(2)}%`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                24H Market Cap\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('marketcapChange24hr') && `${ReturnCrypto('marketcapChange24hr').toFixed(2)}%`}\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr className='maindetailsubcont4__tablerow'>\r\n                                            <td className='maindetailsubcont4__tabledata1'>\r\n                                                Market Cap Rank\r\n                                            </td>\r\n                                            <td className='maindetailsubcont4__tabledata2'>\r\n                                                {ReturnCrypto('market_cap_rank') && `#${ReturnCrypto('market_cap_rank')}`}\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n                <ExtraInfo \r\n                    formatPrice={newPrice} \r\n                    ReturnCrypto={ReturnCrypto}\r\n                    formatSpread={format1DpriceChange}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto\r\n","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js",[],"D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js",["119","120"],"import React, {useReducer} from 'react'\r\nimport CryptoChartContext from './CryptoChartContext';\r\nimport CryptoChartReducer from './CryptoChartReducer'\r\nimport axios from 'axios';\r\nimport {\r\n    SET_LOADING,\r\n    SET_CRYPTO_TIME_FRAME,\r\n    GET_CRYPTO_CHART_DATA,\r\n    SET_MIN_MAX_PRICE,\r\n} from '../../types';\r\n\r\nconst CryptoChartState = ({children}) => {\r\n    \r\n    const InitialState = {\r\n        CRYPTODATA: null,\r\n        MINMAX: null,\r\n        TIMEFRAME: 1,\r\n        LOADING: false,\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(CryptoChartReducer, InitialState);\r\n\r\n    const  SetLoading = () => {\r\n        dispatch({type: SET_LOADING})\r\n    }\r\n\r\n\r\n    const getCryptoChartData = async (CryptoID, TimeFrame) => {\r\n        if (CryptoID) {\r\n            SetLoading();\r\n            setTimeFrame(TimeFrame);\r\n            const Data = await axios.get(`https://api.coingecko.com/api/v3/coins/${CryptoID}/market_chart?vs_currency=usd&days=${TimeFrame}`);\r\n\r\n            const TimeFramePriceData = Data.data.prices;\r\n            const Prices = TimeFramePriceData.map((daydataset, i) => {\r\n                if (String(daydataset)[0] !== '0') return Number(daydataset[daydataset.length - 1].toFixed(2))\r\n                if (String(daydataset)[0] === '0') return Number(daydataset[daydataset.length - 1].toFixed(4))\r\n            // may have to add condition handling if undefined, null, etc\r\n            })\r\n\r\n            const DateFormatted = (type) => {\r\n                if (TimeFramePriceData) {\r\n\r\n                    const DateType = TimeFramePriceData.map((daydataset, i) => {\r\n                        \r\n                        const UnixTimeStamp = daydataset[daydataset.length - daydataset.length]\r\n                        const UnixToDate = new Date(UnixTimeStamp); // milliseconds to seconds\r\n                        const ToolTipDate = String(UnixToDate).split(/\\s/gi).slice(1, 4)\r\n                        const Time = String(UnixToDate).split(/\\s/gi).slice(4, 5)\r\n                        if (type === 'datetime') {   \r\n                            return `${UnixToDate.getHours()}:${UnixToDate.getMinutes()}:${UnixToDate.getSeconds()} ${UnixToDate.getHours() >= 0 && UnixToDate.getHours() < 12 ? `AM` : `PM`}`\r\n                        } else if (type === 'date') {\r\n                            return `${String(ToolTipDate).replaceAll(/,/gi, ' ')} ${Time}`\r\n                        }\r\n                    })\r\n                    return DateType\r\n                    // may have to add condition handling if undefined, null, etc    \r\n                }\r\n            }\r\n\r\n            const PriceSorted = [...Prices].sort() // doing Prices.sort() would sort the Prices list even if it was contained in a variable, had to use spread op\r\n                \r\n            const DatePriceObjArray = TimeFramePriceData.map((item, i) => {\r\n                return {\r\n                    time: DateFormatted('datetime')[i],\r\n                    date: DateFormatted('date')[i],\r\n                    Price: Prices[i]\r\n                }\r\n            })\r\n            \r\n            setMinMaxOfPrice(PriceSorted[0], PriceSorted[PriceSorted.length - 1])\r\n            dispatch({type: GET_CRYPTO_CHART_DATA, payload: DatePriceObjArray})\r\n        }\r\n    }\r\n\r\n    const setTimeFrame = (TimeFrame) => {\r\n        dispatch({type: SET_CRYPTO_TIME_FRAME, payload: TimeFrame})\r\n    }\r\n\r\n    const setMinMaxOfPrice = (min, max) => {\r\n        dispatch({\r\n            type: SET_MIN_MAX_PRICE,\r\n            payload: {\r\n                min,\r\n                max\r\n            }\r\n        })\r\n    }\r\n\r\n    return <CryptoChartContext.Provider value={{\r\n            \r\n            CRYPTODATA: state.CRYPTODATA,\r\n            TIMEFRAME: state.TIMEFRAME,\r\n            LOADING: state.LOADING,\r\n            MINMAX: state.MINMAX,\r\n            getCryptoChartData,\r\n            setTimeFrame\r\n            }}>\r\n                {children}\r\n            </CryptoChartContext.Provider>\r\n}\r\n\r\nexport default CryptoChartState\r\n","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\ExtraInfo.js",["121"],"import {useContext} from 'react'\r\nimport CryptoContext from '../../context/CryptoContext/CryptoContext'\r\nimport useTickerSortableData from './useTickerSortableData'\r\nimport './ExtraInfo.css'\r\n\r\nconst ExtraInfo = ({ReturnCrypto, formatPrice, formatSpread}) => {\r\n\r\n    \r\n    const {TICKERSORTEDFIELD} = useContext(CryptoContext);\r\n\r\n    const getClassNamesFor = (name) => {\r\n        if (!TICKERSORTEDFIELD) {\r\n          return;\r\n        }\r\n        return TICKERSORTEDFIELD.key === name ? TICKERSORTEDFIELD.direction : undefined;\r\n      };\r\n\r\n    const DestructuredTickers = () => {\r\n        \r\n        if (ReturnCrypto('tickers')) {\r\n            \r\n            const MutableTickers = [...ReturnCrypto('tickers')]\r\n            const FinalTickers = MutableTickers.map((ticker, i) => {\r\n                \r\n                const { market, converted_last, base, target } = ticker;\r\n                const { name } = market;\r\n                const { usd } = converted_last\r\n                \r\n                ticker.pair = `${base}/${target}`\r\n                ticker.lasttradeinusd = usd;\r\n                ticker.exchangename = name;\r\n                \r\n                return ticker\r\n            })\r\n            return FinalTickers\r\n            \r\n        }\r\n    }\r\n\r\n    const {items, requestSort} = useTickerSortableData(DestructuredTickers());\r\n\r\n        return (\r\n\r\n        <div className='extrainfo extrainfo--primary'>\r\n            <div className='tickers tickers--primary'>\r\n                <h4 className='tickers__head'>\r\n                    {ReturnCrypto('symbol') && ReturnCrypto('symbol')} Markets\r\n                </h4>\r\n                <div className='tickers__scrollable'>\r\n                    <table className='tickers__table'>\r\n                        <thead className='tickers_thead'>\r\n                            <tr className='tickers_headrow'>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('exchangename')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('exchangename')\r\n                                    }}>\r\n                                        EXCHANGE\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('pair')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('pair')\r\n                                    }}>\r\n                                        PAIR\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('lasttradeinusd')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('lasttradeinusd')\r\n                                    }}>\r\n                                        PRICE\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('bid_ask_spread_percentage')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('bid_ask_spread_percentage')\r\n                                    }}>\r\n                                        SPREAD\r\n                                    </button>\r\n                                </th>\r\n                                <th className='tickers__headcol'>\r\n                                    <button className={`${getClassNamesFor('volume')} tickers__headcolbutton`} onClick={() => {\r\n                                        requestSort('volume')\r\n                                    }}>\r\n                                        24H VOLUME\r\n                                    </button>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        {DestructuredTickers() && items.map((ticker, i) => {\r\n\r\n                            const {\r\n\r\n                                base,\r\n                                bid_ask_spread_percentage,\r\n                                trade_url,\r\n                                volume,\r\n                                exchangename,\r\n                                lasttradeinusd,\r\n                                pair\r\n                            \r\n                            } = ticker;\r\n\r\n                            if (base === ReturnCrypto('symbol')) {\r\n\r\n                                return  <tr className='tickers__row'>\r\n                                        <td className='tickers__dataexchange'>\r\n                                            <a className='tickers_link' href={trade_url} target='_blank' rel='noreferrer'>\r\n                                                {exchangename}\r\n                                            </a>\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                                {pair}\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            ${formatPrice(lasttradeinusd)}\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            {formatSpread(bid_ask_spread_percentage)}%\r\n                                        </td>\r\n                                        <td className='tickers__data'>\r\n                                            ${formatPrice(Number(volume * lasttradeinusd))}\r\n                                        </td>\r\n                                    </tr>\r\n                            }\r\n                        })}\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExtraInfo\r\n","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Extra Info\\useTickerSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Not Found\\NotFound.js",["122"],"import {Link} from 'react-router-dom'\r\nimport './NotFound.css'\r\nimport NotFoundSVG from '../../../images/NotFound.svg'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className='notfound notfound--primary'>\r\n\r\n            <img src={NotFoundSVG} className='notfound__image' />\r\n            <div className='notfoundinner notfoundinner--primary'>\r\n                <h1 className='notfound__head'>\r\n                    Page not found\r\n                </h1>\r\n                <p className='notfound__text'>\r\n                    This page does not exist!\r\n                </p>\r\n                <Link to='/' className='notfound__link'>\r\n                    <button className='notfound__button'>\r\n                        BACK TO HOME\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound\r\n",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":1,"column":31,"nodeType":"129","messageId":"130","endLine":1,"endColumn":40},{"ruleId":"131","severity":1,"message":"132","line":204,"column":129,"nodeType":"133","messageId":"134","endLine":204,"endColumn":131},{"ruleId":"131","severity":1,"message":"132","line":35,"column":67,"nodeType":"133","messageId":"134","endLine":35,"endColumn":69},{"ruleId":"131","severity":1,"message":"132","line":44,"column":77,"nodeType":"133","messageId":"134","endLine":44,"endColumn":79},{"ruleId":"131","severity":1,"message":"132","line":90,"column":73,"nodeType":"133","messageId":"134","endLine":90,"endColumn":75},{"ruleId":"135","severity":1,"message":"136","line":9,"column":13,"nodeType":"137","endLine":9,"endColumn":66},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]