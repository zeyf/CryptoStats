[{"D:\\React Projects\\cryptostats\\src\\index.js":"1","D:\\React Projects\\cryptostats\\src\\App.js":"2","D:\\React Projects\\cryptostats\\src\\reportWebVitals.js":"3","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js":"4","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js":"5","D:\\React Projects\\cryptostats\\src\\components\\context\\types.js":"6","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js":"7","D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js":"8","D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js":"9","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js":"10","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js":"11","D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js":"12","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js":"13","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js":"14","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js":"15","D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js":"16","D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js":"17","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js":"18","D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js":"19"},{"size":500,"mtime":1611623574376,"results":"20","hashOfConfig":"21"},{"size":969,"mtime":1611898604942,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":2773,"mtime":1611990176122,"results":"24","hashOfConfig":"21"},{"size":109,"mtime":1611613321572,"results":"25","hashOfConfig":"21"},{"size":512,"mtime":1611960812177,"results":"26","hashOfConfig":"21"},{"size":1245,"mtime":1611960802256,"results":"27","hashOfConfig":"21"},{"size":383,"mtime":1611976361988,"results":"28","hashOfConfig":"21"},{"size":8168,"mtime":1612025403301,"results":"29","hashOfConfig":"21"},{"size":6120,"mtime":1611989288827,"results":"30","hashOfConfig":"21"},{"size":1165,"mtime":1611863609337,"results":"31","hashOfConfig":"21"},{"size":2874,"mtime":1612025191960,"results":"32","hashOfConfig":"21"},{"size":111,"mtime":1611774377557,"results":"33","hashOfConfig":"21"},{"size":1088,"mtime":1611977204835,"results":"34","hashOfConfig":"21"},{"size":498,"mtime":1611858837669,"results":"35","hashOfConfig":"21"},{"size":253,"mtime":1611775764415,"results":"36","hashOfConfig":"21"},{"size":5505,"mtime":1611960621748,"results":"37","hashOfConfig":"21"},{"size":205,"mtime":1611898521100,"results":"38","hashOfConfig":"21"},{"size":4373,"mtime":1611989803143,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"iun4fm",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\React Projects\\cryptostats\\src\\index.js",[],["82","83"],"D:\\React Projects\\cryptostats\\src\\App.js",[],"D:\\React Projects\\cryptostats\\src\\reportWebVitals.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\types.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js",["84","85","86"],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js",["87","88","89"],"import React, {useEffect, useContext} from 'react'\r\nimport CryptoContext from '../context/CryptoContext/CryptoContext'\r\nimport './Crypto.css'\r\n\r\nconst Crypto = ({match}) => {\r\n\r\n    const {GetCrypto, LOADING, CRYPTO} = useContext(CryptoContext);\r\n    \r\n        useEffect(() => {\r\n            GetCrypto(match.params.CryptoID);\r\n        }, [])\r\n\r\n        const ReturnCrypto = (type, subtype) => {\r\n            if (CRYPTO) {\r\n                \r\n                const {name, id, image, symbol, market_cap_rank, market_data, genesis_date, description, categories, links} = CRYPTO;\r\n\r\n                const {\r\n\r\n                    circulating_supply,\r\n                    total_supply,\r\n                    max_supply,\r\n                    current_price, \r\n                    market_cap_change_percentage_24h_in_currency, \r\n                    price_change_percentage_1h_in_currency,\r\n                    price_change_percentage_24h_in_currency,\r\n                    price_change_percentage_7d_in_currency,\r\n                    price_change_percentage_14d_in_currency,\r\n                    price_change_percentage_30d_in_currency,\r\n                    total_volume,\r\n                    tickers,\r\n                    sparkline_7d,\r\n                    ath,\r\n                    ath_date\r\n\r\n                } = market_data;\r\n\r\n                const {\r\n\r\n                    blockchain_site,\r\n                    homepage\r\n                \r\n                } = links;\r\n\r\n                \r\n                \r\n                if (type === 'name') {\r\n                    return name;\r\n                } else if (type === 'id') {\r\n                    return id\r\n                } else if (type === 'image') {\r\n                    if (image.large) {\r\n                        return image.large\r\n                    } else {\r\n                        return image.small\r\n                    }\r\n                } else if (type === 'symbol') {\r\n                    return symbol.toUpperCase();\r\n                } else if (type === 'market_cap_rank') {\r\n                    return market_cap_rank\r\n                } else if (type === 'circulating_supply') {\r\n                    return circulating_supply\r\n                } else if (type === 'ath') {\r\n                    return ath.usd\r\n                } else if (type === 'ath_date') {\r\n                    return ath_date.usd\r\n                }\r\n                 else if (type === 'max_supply') {\r\n                    return max_supply\r\n                } else if (type === 'genesis_date') {\r\n                    return genesis_date\r\n                } else if (type === 'description') {\r\n                    return description.en\r\n                } else if (type === 'categories') {\r\n                    return categories\r\n                } else if (type === 'current_price') {\r\n                    return `$${current_price.usd.toFixed(2)}`\r\n                } else if (type === 'marketcapChange24hr') {\r\n                    return market_cap_change_percentage_24h_in_currency.usd;\r\n                } else if (type === 'priceChange1hr') {\r\n                    return price_change_percentage_1h_in_currency.usd;\r\n                } else if (type === 'priceChange24hr') {\r\n                    return price_change_percentage_24h_in_currency.usd;\r\n                } else if (type === 'priceChange7d') {\r\n                    return price_change_percentage_7d_in_currency.usd;\r\n                } else if (type === 'priceChange14d') {\r\n                    return price_change_percentage_14d_in_currency.usd;\r\n                } else if (type === 'priceChange30d') {\r\n                    return price_change_percentage_30d_in_currency.usd;\r\n                } else if (type === 'volume') {\r\n                    return total_volume.usd\r\n                } else if (type === 'total_supply') {\r\n                    return total_supply\r\n                } else if (type === 'tickers') {\r\n                    return tickers\r\n                } else if (type === 'sparkline') {\r\n                    return sparkline_7d\r\n                } else if (type === 'links') {\r\n                    if (subtype === 'blockchain_site') {\r\n                        \r\n                        const Filtering = blockchain_site.filter((item, i) => {\r\n                            if (item.match(/etherscan/gi)) {\r\n                                return item\r\n                            } else if (item.match(/blockchain/gi)) {\r\n                                return item\r\n                            }\r\n                        })\r\n\r\n                        return Filtering[0]\r\n\r\n                    } else if (subtype === 'homepage') {\r\n                        return homepage[0]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (\r\n        \r\n        <div>\r\n            {LOADING ? 'd' :\r\n\r\n            <div className='cryptoinfo cryptoinfo--primary'>\r\n                <div className='maindetails maindetails--primary'>\r\n                        <img className='maindetails__image' src={ReturnCrypto('image')} />\r\n                        <h1>\r\n                            {ReturnCrypto('name')}\r\n                        </h1>\r\n                        <span>\r\n                            {ReturnCrypto('symbol')}\r\n                        </span>\r\n                    <div>\r\n                    <h2>\r\n                        {ReturnCrypto('current_price')}\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            {ReturnCrypto('market_cap_rank')} |\r\n            {ReturnCrypto('circulating_supply')} |\r\n            {ReturnCrypto('genesis_date')} |\r\n            {ReturnCrypto('categories')} |\r\n            {ReturnCrypto('marketcapChange24hr')} |\r\n            {ReturnCrypto('priceChange1hr')} |\r\n            {ReturnCrypto('priceChange24hr')} |\r\n            {ReturnCrypto('priceChange7d')} |\r\n            {ReturnCrypto('priceChange14d')} |\r\n            {ReturnCrypto('priceChange30d')} |\r\n            {ReturnCrypto('volume')} |\r\n            {ReturnCrypto('total_supply')} |\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto\r\n","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js",["90","91"],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js",[],["92","93"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js",["94"],"import {useContext} from 'react'\r\nimport './Table.css'\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton'\r\nimport {Link} from 'react-router-dom'\r\nimport useSortableData from './useSortableData'\r\nimport TableContext from '../context/TableContext/TableContext'\r\n\r\n\r\nconst TableSkeleton = () => {\r\n    \r\n\r\n    const { ROWSPERPAGE } = useContext(TableContext);\r\n    //default postsperpage is 25. now it will be able to adjusted based posts per page.\r\n\r\n    const DefaultCount = () => {\r\n        const RowList=[]\r\n        for (let i=1; i < (ROWSPERPAGE + 1); i++) {\r\n            RowList.push(i)\r\n        }\r\n        return RowList\r\n    }\r\n\r\n    const SkeletonType = (type) => {\r\n        if (type === 'rank') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'icon') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'name') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton  width={225} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'price') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'priceChange1d') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === '24hvolume') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'sparklinesvg') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={150} height={50}count={1}/>\r\n                </SkeletonTheme>\r\n        }\r\n    }\r\n\r\n    return (\r\n            <>\r\n             <table className='table table--primary'>\r\n                <thead className='table__head'>\r\n                    <tr className='table__head__row'>\r\n                        <th className='table__headcol table__headcol--rank'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                             #\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--name'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                NAME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--pricechange24h'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                24H CHANGE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--price'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                PRICE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--volume'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                24H VOLUME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--sparkline'>\r\n                            PRICE 7D\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {DefaultCount().map((item, i) => {\r\n                            return <tr className='table__row'>\r\n                            <td className='tablebody__data tablebody__data--rank'>{SkeletonType('rank')}</td>\r\n                            <td className='tablebody__data tablebody__data--name'>\r\n                                    <Link style={{textDecoration: 'none', margin: '0px', padding: '0px'}} to={``}>\r\n                                <div className='table_'>\r\n                                        {<span style={{margin: '0px 10px'}}>{SkeletonType('icon')}</span>}\r\n                                    <p className='s'>{SkeletonType('name')}</p>\r\n                                    \r\n                                </div>\r\n                                </Link>\r\n                            </td>\r\n                            <td className='tablebody__data tablebody__data--pricechange24h'>{SkeletonType('priceChange1d')}</td>\r\n                            <td className='tablebody__data tablebody__data--price'>{SkeletonType('price')}</td>\r\n                            <td className='tablebody__data tablebody__data--volume'>{SkeletonType('24hvolume')}</td>\r\n                            \r\n                            <td className='tablebody__data tablebody__data--sparkline'>\r\n                                {SkeletonType('sparklinesvg')}\r\n                            </td>\r\n                        </tr>\r\n                \r\n                    })}\r\n                </tbody>\r\n                </table>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default TableSkeleton\r\n","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js",[],"D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":37,"nodeType":"101","messageId":"102","endLine":3,"endColumn":52},{"ruleId":"99","severity":1,"message":"103","line":121,"column":164,"nodeType":"101","messageId":"102","endLine":121,"endColumn":184},{"ruleId":"99","severity":1,"message":"104","line":121,"column":186,"nodeType":"101","messageId":"102","endLine":121,"endColumn":199},{"ruleId":"105","severity":1,"message":"106","line":11,"column":12,"nodeType":"107","endLine":11,"endColumn":14,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":101,"column":76,"nodeType":"111","messageId":"112","endLine":101,"endColumn":78},{"ruleId":"113","severity":1,"message":"114","line":124,"column":25,"nodeType":"115","endLine":124,"endColumn":91},{"ruleId":"99","severity":1,"message":"116","line":40,"column":13,"nodeType":"101","messageId":"102","endLine":40,"endColumn":18},{"ruleId":"99","severity":1,"message":"117","line":40,"column":20,"nodeType":"101","messageId":"102","endLine":40,"endColumn":31},{"ruleId":"95","replacedBy":"118"},{"ruleId":"97","replacedBy":"119"},{"ruleId":"99","severity":1,"message":"120","line":5,"column":8,"nodeType":"101","messageId":"102","endLine":5,"endColumn":23},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'SparklinesSpots' is defined but never used.","Identifier","unusedVar","'priceChange7d_CG_USD' is assigned a value but never used.","'priceChange1w' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetCrypto' and 'match.params.CryptoID'. Either include them or remove the dependency array.","ArrayExpression",["123"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'items' is assigned a value but never used.","'requestSort' is assigned a value but never used.",["121"],["122"],"'useSortableData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},"Update the dependencies array to be: [GetCrypto, match.params.CryptoID]",{"range":"126","text":"127"},[338,340],"[GetCrypto, match.params.CryptoID]"]