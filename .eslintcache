[{"D:\\React Projects\\cryptostats\\src\\index.js":"1","D:\\React Projects\\cryptostats\\src\\App.js":"2","D:\\React Projects\\cryptostats\\src\\reportWebVitals.js":"3","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js":"4","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js":"5","D:\\React Projects\\cryptostats\\src\\components\\context\\types.js":"6","D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js":"7","D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js":"8","D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js":"9","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js":"10","D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js":"11","D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js":"12","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js":"13","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js":"14","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js":"15","D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js":"16","D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js":"17","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js":"18","D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js":"19","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js":"20","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js":"21","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js":"22","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js":"23","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js":"24"},{"size":500,"mtime":1611623574376,"results":"25","hashOfConfig":"26"},{"size":1141,"mtime":1612158262001,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":2773,"mtime":1611990176122,"results":"29","hashOfConfig":"26"},{"size":109,"mtime":1611613321572,"results":"30","hashOfConfig":"26"},{"size":642,"mtime":1612159760201,"results":"31","hashOfConfig":"26"},{"size":1245,"mtime":1611960802256,"results":"32","hashOfConfig":"26"},{"size":383,"mtime":1611976361988,"results":"33","hashOfConfig":"26"},{"size":8124,"mtime":1612025678287,"results":"34","hashOfConfig":"26"},{"size":18184,"mtime":1612159956409,"results":"35","hashOfConfig":"26"},{"size":1165,"mtime":1611863609337,"results":"36","hashOfConfig":"26"},{"size":2819,"mtime":1612153073192,"results":"37","hashOfConfig":"26"},{"size":111,"mtime":1611774377557,"results":"38","hashOfConfig":"26"},{"size":1088,"mtime":1612156424261,"results":"39","hashOfConfig":"26"},{"size":498,"mtime":1612045644629,"results":"40","hashOfConfig":"26"},{"size":253,"mtime":1611775764415,"results":"41","hashOfConfig":"26"},{"size":5505,"mtime":1611960621748,"results":"42","hashOfConfig":"26"},{"size":205,"mtime":1611898521100,"results":"43","hashOfConfig":"26"},{"size":5741,"mtime":1612141936211,"results":"44","hashOfConfig":"26"},{"size":4740,"mtime":1612050912367,"results":"45","hashOfConfig":"26"},{"size":2951,"mtime":1612199689450,"results":"46","hashOfConfig":"26"},{"size":2713,"mtime":1612199926009,"results":"47","hashOfConfig":"26"},{"size":121,"mtime":1612156917113,"results":"48","hashOfConfig":"26"},{"size":725,"mtime":1612159895048,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"iun4fm",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React Projects\\cryptostats\\src\\index.js",[],["103","104"],"D:\\React Projects\\cryptostats\\src\\App.js",[],"D:\\React Projects\\cryptostats\\src\\reportWebVitals.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\types.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\TableContext\\TableReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Navbar\\Navbar.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\Table.js",["105","106","107"],"import React, {useEffect, useContext} from 'react'\r\nimport TableContext from '../context/TableContext/TableContext'\r\nimport {Sparklines, SparklinesLine, SparklinesSpots} from 'react-sparklines';\r\nimport FormatFunctions from '../../functions/Formatting Functions/FormatFunctions'\r\nimport {Link} from 'react-router-dom'\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton'\r\nimport useSortableData from './useSortableData'\r\nimport TablePagination from './TablePagination'\r\nimport './Table.css'\r\nimport TableSkeleton from './TableSkeleton'\r\n\r\nconst Table = () => {\r\n\r\n    // UPPERCASE ONLY = STATE VALUES | NON UPPERCASE = FUNCTIONS //\r\n    const {\r\n        LOADING,\r\n        CRYPTOS,\r\n        INITIALLOADING,\r\n        CURRENTPAGE,\r\n        ROWSPERPAGE,\r\n        SORTEDFIELD,\r\n        GetCryptos\r\n    } = useContext(TableContext);\r\n    // \"OUTSOURCING\" functions on style and manipulation of general data representation for table data to keep a clean component\r\n    \r\n    const { items, requestSort } = useSortableData(CRYPTOS);\r\n\r\n    useEffect(() => {\r\n        GetCryptos(CURRENTPAGE, ROWSPERPAGE);\r\n        if (SORTEDFIELD) {\r\n            requestSort('market_cap_rank');\r\n            if (SORTEDFIELD.direction === 'descending') {\r\n                requestSort('market_cap_rank');\r\n            }\r\n        }\r\n        //eslint-disable-next-line\r\n    }, [])\r\n    \r\n    const {\r\n        newVol,\r\n        newPrice,\r\n        setPriceColor,\r\n        setLinkParamByID,\r\n        addDirectionalTriangle,\r\n        setSparklineColor,\r\n        format1DpriceChange,\r\n        nameShortener\r\n    } = FormatFunctions;\r\n    \r\n    const SkeletonType = (type) => {\r\n        if (type === 'rank') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'icon') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'name') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton  width={225} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'price') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'priceChange1d') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === '24hvolume') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'sparklinesvg') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={150} height={50}count={1}/>\r\n                </SkeletonTheme>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='tablecomponent tablecomponent--primary'>\r\n            <TablePagination />\r\n            {!INITIALLOADING ? <TableSkeleton /> : <>\r\n             <table className='table table--primary'>\r\n                <thead className='table__head'>\r\n                    <tr className='table__head__row'>\r\n                        <th className='table__headcol table__headcol--rank'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}} onClick={() => {requestSort('market_cap_rank')}} >\r\n                             #\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--name'>\r\n                            <button className='table__headcol__button table__headcol__button--name' style={{width: '100%'}} onClick={() => {requestSort('name')}}>\r\n                                NAME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--pricechange24h'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}} onClick={() => {requestSort('price_change_percentage_7d_in_currency')}}>\r\n                                24H CHANGE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--price'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}} onClick={() => {requestSort('current_price')}}>\r\n                                PRICE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--volume'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}} onClick={() => {requestSort('total_volume')}}>\r\n                                24H VOLUME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--sparkline'>\r\n                            PRICE 7D\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item, i) => {\r\n                            const {market_cap_rank, current_price, image, total_volume, symbol, name, price_change_percentage_7d_in_currency, id, sparkline_in_7d, priceChange7d_CG_USD, priceChange1w} = item;\r\n                            return <tr className='table__row'>\r\n                            <td className='tablebody__data tablebody__data--rank'>{LOADING ?  SkeletonType('rank'): market_cap_rank}</td>\r\n                            <td className='tablebody__data tablebody__data--name'>\r\n                                    <Link style={{textDecoration: 'none', margin: '0px', padding: '0px', color: 'black'}} to={setLinkParamByID(id)}>\r\n                                <div className='table_'>\r\n                                        {LOADING ? <span style={{margin: '0px 10px'}}>{SkeletonType('icon')}</span> : <img src={image} alt={`${name} | ${symbol.toUpperCase()} icon`} className='tablebody__nameimage' style={{height: '20px', width: '20px'}} />}\r\n                                    <p className='s'>{LOADING ? SkeletonType('name') :`${nameShortener(name)} • ${symbol.toUpperCase()}`}</p>\r\n                                </div>\r\n                                </Link>\r\n                            </td>\r\n                            <td className='tablebody__data tablebody__data--pricechange24h' style={setPriceColor(price_change_percentage_7d_in_currency)}>{LOADING ? SkeletonType('priceChange1d'): `${addDirectionalTriangle(price_change_percentage_7d_in_currency)}${format1DpriceChange(price_change_percentage_7d_in_currency)}%`}</td>\r\n                            <td className='tablebody__data tablebody__data--price'>{LOADING ? SkeletonType('price') : `$${newPrice(current_price)}`}</td>\r\n                            <td className='tablebody__data tablebody__data--volume'>{LOADING ? SkeletonType('24hvolume') : `${newVol(total_volume)}`}</td>\r\n                            \r\n                            <td className='tablebody__data tablebody__data--sparkline'>\r\n                                {LOADING ? SkeletonType('sparklinesvg'): <Link style={{textDecoration: 'none', margin: '0px', padding: '0px'}} to={setLinkParamByID(id)}>\r\n                                    <Sparklines data={sparkline_in_7d.price} width={250} height={100}>\r\n                                        <SparklinesLine style={{fill: 'none'}} color={setSparklineColor(price_change_percentage_7d_in_currency)} />\r\n                                    </Sparklines>\r\n                                </Link>}\r\n                            </td>\r\n                        </tr>\r\n                \r\n                    })}\r\n                </tbody>\r\n                </table>\r\n            </>\r\n            }\r\n            <TablePagination />\r\n        </div>\r\n    )\r\n}\r\nexport default Table\r\n","D:\\React Projects\\cryptostats\\src\\components\\Crypto\\Crypto.js",["108","109","110","111","112","113","114"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\useSortableData.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TablePagination.js",["115","116"],"import TableContext from '../context/TableContext/TableContext'\r\nimport React, {useContext} from 'react'\r\nimport './TablePagination.css'\r\nimport useSortableData from './useSortableData'\r\n\r\nconst TablePagination = ({ShowRowsPerPage}) => {\r\n    const {CURRENTPAGE, ROWSPERPAGE, CRYPTOS, setCurrentPage, setRowsPerPage} = useContext(TableContext);\r\n    const totalPages = (500/ROWSPERPAGE);\r\n    const PageNumbers = [];\r\n    for (let i=1; i < (totalPages + 1); i++) {\r\n        PageNumbers.push(i)\r\n    }\r\n\r\n    const BackButton = () => {\r\n        if (CURRENTPAGE !== 1) {\r\n            setCurrentPage(PageNumbers[CURRENTPAGE - 2], ROWSPERPAGE)\r\n        }\r\n    }\r\n    const NextButton = () => {\r\n        if (CURRENTPAGE !== totalPages) {\r\n            setCurrentPage(PageNumbers[CURRENTPAGE], ROWSPERPAGE)\r\n        }\r\n    }\r\n    const BackButtonStyle = () => {\r\n        if (CURRENTPAGE !== 1) {\r\n            return {visibility: 'visible'}\r\n        } else {\r\n            return {visibility: 'hidden'}\r\n        }\r\n\r\n    }\r\n    const NextButtonStyle = () => {\r\n        if (CURRENTPAGE !== totalPages) {\r\n            return {visibility: 'visible'}\r\n        } else {\r\n            return {visibility: 'hidden'}\r\n        }\r\n    }\r\n\r\n    const { items, requestSort } = useSortableData(CRYPTOS);\r\n    \r\n    const RowPerPageonChange = (event) => {\r\n        setRowsPerPage(event.target.value);\r\n        setCurrentPage(PageNumbers[CURRENTPAGE - 1], event.target.value);\r\n    }\r\n    \r\n    return (\r\n        <div className='pagination pagination--primary'>\r\n                <div className='rowperpage rowperpage--primary'>\r\n                    <label className='rowsperpage__label'>Rows per page: </label>\r\n                    <select className='rowsperpage__select' value={ROWSPERPAGE} onChange={RowPerPageonChange}>\r\n                        <option className='rowsperpage__option'>\r\n                            20\r\n                        </option>\r\n                        <option className='rowsperpage__option'>\r\n                            25\r\n                        </option>\r\n                        <option className='rowsperpage__option'>\r\n                            50\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n            <ul className='paginationul paginationul--primary'>\r\n                <button className='paginationul__button' style={BackButtonStyle()} onClick={() => {\r\n                    BackButton();\r\n                }}>\r\n                    {`<`}\r\n                </button>\r\n                <button className='paginationul__button' style={NextButtonStyle()} onClick={() => {\r\n                    NextButton();\r\n                }}>\r\n                    {`>`}\r\n                </button>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TablePagination\r\n","D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoState.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoReducer.js",[],"D:\\React Projects\\cryptostats\\src\\components\\layout\\Loader\\Loader.js",[],["117","118"],"D:\\React Projects\\cryptostats\\src\\components\\Table\\TableSkeleton.js",["119"],"import {useContext} from 'react'\r\nimport './Table.css'\r\nimport Skeleton, {SkeletonTheme} from 'react-loading-skeleton'\r\nimport {Link} from 'react-router-dom'\r\nimport useSortableData from './useSortableData'\r\nimport TableContext from '../context/TableContext/TableContext'\r\n\r\n\r\nconst TableSkeleton = () => {\r\n    \r\n\r\n    const { ROWSPERPAGE } = useContext(TableContext);\r\n    //default postsperpage is 25. now it will be able to adjusted based posts per page.\r\n\r\n    const DefaultCount = () => {\r\n        const RowList=[]\r\n        for (let i=1; i < (ROWSPERPAGE + 1); i++) {\r\n            RowList.push(i)\r\n        }\r\n        return RowList\r\n    }\r\n\r\n    const SkeletonType = (type) => {\r\n        if (type === 'rank') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'icon') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton circle={true} width={20} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'name') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton  width={225} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'price') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'priceChange1d') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === '24hvolume') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={50} height={20}count={1}/>\r\n                </SkeletonTheme>\r\n        } else if (type === 'sparklinesvg') {\r\n            return <SkeletonTheme color='#cececf'>\r\n                <Skeleton width={150} height={50}count={1}/>\r\n                </SkeletonTheme>\r\n        }\r\n    }\r\n\r\n    return (\r\n            <>\r\n             <table className='table table--primary'>\r\n                <thead className='table__head'>\r\n                    <tr className='table__head__row'>\r\n                        <th className='table__headcol table__headcol--rank'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                             #\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--name'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                NAME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--pricechange24h'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                24H CHANGE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--price'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                PRICE\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--volume'>\r\n                            <button className='table__headcol__button' style={{width: '100%'}}>\r\n                                24H VOLUME\r\n                            </button>\r\n                        </th>\r\n                        <th className='table__headcol table__headcol--sparkline'>\r\n                            PRICE 7D\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {DefaultCount().map((item, i) => {\r\n                            return <tr className='table__row'>\r\n                            <td className='tablebody__data tablebody__data--rank'>{SkeletonType('rank')}</td>\r\n                            <td className='tablebody__data tablebody__data--name'>\r\n                                    <Link style={{textDecoration: 'none', margin: '0px', padding: '0px'}} to={``}>\r\n                                <div className='table_'>\r\n                                        {<span style={{margin: '0px 10px'}}>{SkeletonType('icon')}</span>}\r\n                                    <p className='s'>{SkeletonType('name')}</p>\r\n                                    \r\n                                </div>\r\n                                </Link>\r\n                            </td>\r\n                            <td className='tablebody__data tablebody__data--pricechange24h'>{SkeletonType('priceChange1d')}</td>\r\n                            <td className='tablebody__data tablebody__data--price'>{SkeletonType('price')}</td>\r\n                            <td className='tablebody__data tablebody__data--volume'>{SkeletonType('24hvolume')}</td>\r\n                            \r\n                            <td className='tablebody__data tablebody__data--sparkline'>\r\n                                {SkeletonType('sparklinesvg')}\r\n                            </td>\r\n                        </tr>\r\n                \r\n                    })}\r\n                </tbody>\r\n                </table>\r\n            </>\r\n    )\r\n}\r\n\r\nexport default TableSkeleton\r\n","D:\\React Projects\\cryptostats\\src\\components\\layout\\Footer\\Footer.js",[],"D:\\React Projects\\cryptostats\\src\\functions\\Formatting Functions\\FormatFunctions.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoSkeleton.js",[],"D:\\React Projects\\cryptostats\\src\\components\\Crypto\\CryptoChart\\CryptoChart.js",["120","121","122"],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartState.js",["123"],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartContext.js",[],"D:\\React Projects\\cryptostats\\src\\components\\context\\CryptoContext\\CryptoChart Context\\CryptoChartReducer.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":37,"nodeType":"130","messageId":"131","endLine":3,"endColumn":52},{"ruleId":"128","severity":1,"message":"132","line":121,"column":164,"nodeType":"130","messageId":"131","endLine":121,"endColumn":184},{"ruleId":"128","severity":1,"message":"133","line":121,"column":186,"nodeType":"130","messageId":"131","endLine":121,"endColumn":199},{"ruleId":"128","severity":1,"message":"134","line":5,"column":9,"nodeType":"130","messageId":"131","endLine":5,"endColumn":19},{"ruleId":"128","severity":1,"message":"135","line":5,"column":21,"nodeType":"130","messageId":"131","endLine":5,"endColumn":35},{"ruleId":"136","severity":1,"message":"137","line":15,"column":12,"nodeType":"138","endLine":15,"endColumn":14,"suggestions":"139"},{"ruleId":"128","severity":1,"message":"140","line":20,"column":13,"nodeType":"130","messageId":"131","endLine":20,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":153,"column":29,"nodeType":"143","endLine":153,"endColumn":102},{"ruleId":"144","severity":1,"message":"145","line":206,"column":129,"nodeType":"146","messageId":"147","endLine":206,"endColumn":131},{"ruleId":"148","severity":1,"message":"149","line":208,"column":44,"nodeType":"143","endLine":208,"endColumn":112},{"ruleId":"128","severity":1,"message":"150","line":40,"column":13,"nodeType":"130","messageId":"131","endLine":40,"endColumn":18},{"ruleId":"128","severity":1,"message":"151","line":40,"column":20,"nodeType":"130","messageId":"131","endLine":40,"endColumn":31},{"ruleId":"124","replacedBy":"152"},{"ruleId":"126","replacedBy":"153"},{"ruleId":"128","severity":1,"message":"154","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":23},{"ruleId":"128","severity":1,"message":"155","line":10,"column":35,"nodeType":"130","messageId":"131","endLine":10,"endColumn":42},{"ruleId":"128","severity":1,"message":"156","line":10,"column":64,"nodeType":"130","messageId":"131","endLine":10,"endColumn":76},{"ruleId":"136","severity":1,"message":"157","line":16,"column":8,"nodeType":"138","endLine":16,"endColumn":10,"suggestions":"158"},{"ruleId":"144","severity":1,"message":"145","line":34,"column":67,"nodeType":"146","messageId":"147","endLine":34,"endColumn":69},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'SparklinesSpots' is defined but never used.","Identifier","unusedVar","'priceChange7d_CG_USD' is assigned a value but never used.","'priceChange1w' is assigned a value but never used.","'Sparklines' is defined but never used.","'SparklinesLine' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetCrypto' and 'match.params.CryptoID'. Either include them or remove the dependency array.","ArrayExpression",["161"],"'setPriceColor' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'items' is assigned a value but never used.","'requestSort' is assigned a value but never used.",["159"],["160"],"'useSortableData' is defined but never used.","'LOADING' is assigned a value but never used.","'setTimeFrame' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CRYPTODATA', 'ReturnCrypto', 'TIMEFRAME', and 'getCryptoChartData'. Either include them or remove the dependency array. If 'ReturnCrypto' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [GetCrypto, match.params.CryptoID]",{"range":"167","text":"168"},"Update the dependencies array to be: [CRYPTODATA, ReturnCrypto, TIMEFRAME, getCryptoChartData]",{"range":"169","text":"170"},[585,587],"[GetCrypto, match.params.CryptoID]",[589,591],"[CRYPTODATA, ReturnCrypto, TIMEFRAME, getCryptoChartData]"]